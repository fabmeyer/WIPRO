[meta title:"BB84" description:"Quantum cryptography protocol explained"/]

[Header
  fullWidth:true
  title:"BB84"
  subtitle:"Quantum cryptography protocol explained"
  author:"Adrian Althaus, Fabian Meyer"
  date:`(new Date()).toDateString()`
  background:"#403d58"
  color:"#ededef"
  /]

# Introduction

The goal of this website is to explain the BB84-protocol in a simple way.
BB84 is named after its inventors, Charles H. Bennet and Gilles Brassard and the year of its publication, 1984. BB84 is one of the most popular quantum-key-distribution (QKD) Protocols.

With this protocol, two parties (Alice and Bob) can compute together securely a private key (a string of bits, 1 or 0) and share it via a quantum channel. With that key they can encrypt and decrypt data symmetric as a one-time pad.

First of all Alice and Bob have to decide on some settings like the length of the bitstring, the ratio of their bases and so on:

[var name:"strLength" value:2048 /]
[var name:"noise" value:0 /]
[var name:"AliceProb" value:50 /]
[var name:"BobProb" value:50 /]
[var name:"eavesdropping" value:0 /]
[fullWidth]
  [SystemOverview
    strLength:strLength
    noise:noise
    AliceProb:AliceProb
    BobProb:BobProb
    eavesdropping:eavesdropping
    text:"save settings"
    ]
    [TextInput value:strLength/]
  [/SystemOverview]
[/fullWidth]

# Alices computes a string and a base with given length

Alice computes a random bitstring with the given length [Display value:strLength format:"d" /]. She then also has to compute a random string of bases with the same length. You can change the ratio of her bases with the slider on the system-overview panel. Click on the button to start the computation of her bitstring and base.

[var name:"AliceBitString" value:"" /]
[var name:"AliceBaseString" value:"" /]
[var name:"AliceDataHasLoaded" value:false /]
[ButtonAliceStart
  strLength:strLength
  AliceProb:AliceProb
  bitString:AliceBitString
  baseString:AliceBaseString
  autostart:false
  dataHasLoaded:AliceDataHasLoaded
  text:"get Alices bitstring and base"
  /]

Now Alice has computed a random bitstring and a base. You can take a look at Alices bitstring and her base here when you click into the grid below:

## Alices bitstring and base

[var name:"AliceBitStringZoom" value:100 /]
[var name:"AliceBaseStringZoom" value:100 /]
[PhotonGridDouble
  bitString:AliceBitString
  baseString:AliceBaseString
  dataHasLoaded:AliceDataHasLoaded
  bitStringZoom:AliceBitStringZoom
  baseStringZoom:AliceBaseStringZoom
  /]

## Alice sends her photons to Bob

Every single bit of her string will be encoded with the base so that from the bit and the base a specific polarization results. Her photons can have a polarization with 0째, 45째, 90째 or 135째. The encryption of here photons follows the following schema:

[InformationBox
  size:"big"
  /]

Now Alice takes her photons and sends them via a quantum channel to Bob.
This quantum channel is an optical channel like a optical-fibre cable.
Sometimes the channel is noisy and some photons or their polarization will get changed. Click on the button below to send her photons to Bob.

// TODO: insert noise here

[var name:"RawPolarization" value:null /]
[var name:"AlicePolarization" value:null /]
[var name:"PolarizationHasLoaded" value:false /]
[ButtonEmitPhotons
  bitString:AliceBitString
  baseString:AliceBaseString
  rawPolarization:RawPolarization
  polarization:AlicePolarization
  noise:noise
  polarizationHasLoaded:PolarizationHasLoaded
  text:"Send photons to Bob"
  /]

[fullWidth]
  [AnimationTest 
  dataHasLoaded:PolarizationHasLoaded
  /]
[/fullWidth]

# Eve wants to eavesdrop on Alice's photons

An eavesdropper could potentially measure Alice's photons and try to decode the original message.

// TODO: insert eavesdropping here

# Bob measures Alices photons

Like Alice, Bob first has to define a random basestring to measure Alices photons polarization. 

## Bobs computes a base with the same length

Bobs basestring has to be the same length as Alices ones: Length [Display value:strLength format:"d" /]. Click on the button below to compute a corresponding base for Bob

[var name:"BobBaseString" value:null /]
[var name:"BobBaseHasLoaded" value:false /]
[ButtonBobBase
  strLength:strLength
  BobProb:BobProb
  baseString:BobBaseString
  bobBaseHasLoaded:BobBaseHasLoaded
  text:"get Bobs base"
  /]

## Bob measures Alices Photons with his base

For every photon, if Bobs base is the same as Alices, the outcome will be certain and Bob will theoretically be able to decode the String from the polarization together with his base. That means the polarization of the measured photon will not change.

[fullWidth]
  [AnimationPhoton1/]
[/fullWidth]

However if he chose the wrong base, the polarization of the photons will be lost as he will set the polarization again randomly while measuring it. If Alice and Bob both chose both bases with a chance of 50%, Bob should measure every second photon correctly.

[fullWidth]
  [AnimationPhoton2/]
[/fullWidth]

But Alice and Bob can decide to chose a specific base with a chance higher than 50%. In that way they can improve their key so that they measure the same base more often.
Now Bob takes his base and measures Alices photons with his base to compute a bitstring. Click on the button below to measure Alices photons.

[var name:"BobBitString" value:null /]
[var name:"BobStringHasLoaded" value:false /]
[var name:"BobDataHasLoaded" value:false /]
[ButtonMeasure
  strLength:strLength
  rawPolarization:RawPolarization
  polarization:AlicePolarization
  baseString:BobBaseString
  measuredString:BobBitString
  bobBaseHasLoaded:BobBaseHasLoaded
  bobStringHasLoaded:BobStringHasLoaded
  bobDataHasLoaded:BobDataHasLoaded
  autostart:false
  text:"measure Alices photons"
  /]

## Bobs bitstring and base

Here you can see Bob's base and the bitstring that he computed from the photons that he received from Alice. You can again click on the grid to inspect this two strings.

[var name:"BobBitStringZoom" value:100 /]
[var name:"BobBaseStringZoom" value:100 /]
[PhotonGridDouble
  bitString:BobBitString
  baseString:BobBaseString
  dataHasLoaded:BobDataHasLoaded
  bitStringZoom:BobBitStringZoom
  baseStringZoom:BobBaseStringZoom
  /]

## Alice and Bob compare their bases

Alice and Bob use a public authenticated channel to compare their bases.

[var name:"ComparedBase" value:null /]
[var name:"ComparedBaseHasLoaded" value:null /]
[var name:"CommonKey" value: null /]
[var name:"CommonKeyHasLoaded" value:null /]
[var name:"CommonKeyLength" value: null /]
[ButtonShortenKey
  baseString1:AliceBaseString
  baseString2:BobBaseString
  bitString:AliceBitString
  comparedBase:ComparedBase
  comparedBaseHasLoaded:ComparedBaseHasLoaded
  commonKey:CommonKey
  commonKeyHasLoaded:CommonKeyHasLoaded
  commonKeyLength:CommonKeyLength
  text:"compare basestrings"
  /]

If they choose both bases with a chance of 50%, then they should have the same base for every photon with a probability of 50%.

[var name:"ComparedBaseZoom" value:null /]
[PhotonGridSingle
  string:ComparedBase
  dataHasLoaded:ComparedBaseHasLoaded
  stringZoom:ComparedBaseZoom
  /]

## Alice and Bob shorten their bitstrings

They drop all bits from their bitstrings where their bases do not correspond.
In that way they create a shortened key together that they share.

The length of their shortend key: [Display value:CommonKeyLength format:"d" /]

This is the shortened key:

[var name:"CommonKeyZoom" value:null /]
[PhotonGridSingle
  string:CommonKey
  dataHasLoaded:CommonKeyHasLoaded
  stringZoom:CommonKeyZoom
  /]
