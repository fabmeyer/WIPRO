[meta title:"BB84" description:"Quantum cryptography protocol explained"/]

[Header
  fullWidth:true
  title:"BB84"
  subtitle:"Quantum cryptography protocol explained"
  author:"Adrian Althaus, Fabian Meyer"
  date:`(new Date()).toDateString()`
  background:"#403d58"
  color:"#ededef"
   /]

# Introduction

[var name:"strLength" value:2048 /]
[var name:"noise" value:50 /]
[var name:"frequency" value:1 /]
[var name:"error" value:0 /]
[fullWidth]
  [SystemOverview
    noise:noise
    frequency:frequency
  ]
      [TextInput value:strLength name:textInput/]
  [/SystemOverview]
[/fullWidth]

# Alice creates a random bitstring

[Aside]
  [AsideText]
    Jass oder auch Jas kommt aus den Niederlanden. Niederländische Vorläufer waren Jasspel und Belle-Bruid. Nicht nur der Jas (Bauer), auch die Trumpfneun («Nell») erinnert an die niederländischen Ursprünge.

    Im letzten Drittel des 18. Jahrhunderts gelangte das Spiel mit protestantischen Söldnern in die Schweiz. Jass gewann schnell an Beliebtheit und verdrängte das Tarock, welches von eidgenössischen und französischen Söldnern aus Oberitalien in die Schweiz gebracht wurde.
  [/AsideText]
[/Aside]

## Alices computes a string and a base with given length

[ButtonStartCopy
  strLength:strLength
  noise:noise
  frequency:frequency
  error:error
  bitString:AliceBitString
  baseString:AliceBaseString
  autostart:false
  dataHasLoaded:dataHasLoaded
  text:"get Alices string"
/]

## Alices bitstring and base

[var name:"AliceBitString" value:null /]
[var name:"AliceBaseString" value:null /]
[var name:"dataHasLoaded" value:null /]
[var name:"AliceBitStringZoom" value:100 /]
[var name:"AliceBaseStringZoom" value:100 /]
[PhotonGrid
  bitString:AliceBitString
  baseString:AliceBaseString
  dataHasLoaded:dataHasLoaded
  aliceBitStringZoom:AliceBitStringZoom
  aliceBaseStringZoom:AliceBaseStringZoom
  min:25
  max:500
  step:25
  /]

## Alice sends her photons to Bob

[fullWidth]
  [ShowHide isVisible:"flex" position:"center"]
    [AnimationTest /]
  [/ShowHide]
[/fullWidth]

# Bob measures Alices photons

## Length of Bobs base

Like Alice, Bob will define a random basestring to measure Alices Photons Polarization. Bobs basestring has the same length as Alices ones.

Length of string: [Display value:strLength format:"d" /].

## Bobs computes a base with the same length

[var name:"BobBaseString" value:null /]
[ButtonStart strLength:strLength bitString:null baseString:BobBaseString autostart:false text:"get Bobs base"/]

[var name:"BobBaseStringZoom" value:100 /]
[ShowHide isVisible:"flex" position:"center"]
  [Range value:BobBaseStringZoom min:25 max:500 step:25 /]
  [ScrollBox value:BobBaseString zoomFactor:BobBaseStringZoom /]
[/ShowHide]

## Bob measures Alices Photons with his base

For every photon, if Bobs base is the same as Alices, the outcome will be certain and Bob will be able to decode the String. However if he chose the wrong base, the polarization of the photons will be lost. On average, Bob should measure every second photon correctly.

[var name:"BobBitString" value:null /]
[ButtonMeasure strLength:strLength bitString:AliceBitString baseString:BobBaseString measuredString:BobBitString autostart:false text:"measure Alices photons"/]

[var name:"BobBitStringZoom" value:100 /]
[ShowHide isVisible:"flex" position:"center"]
  [Range value:BobBitStringZoom min:25 max:500 step:25 /]
  [ScrollBox value:BobBitString zoomFactor:BobBitStringZoom /]
[/ShowHide]

## Alice and Bob compare their bases

Alice and Bob use a public authenticated channel to compare their bases.

[var name:"comparedString" value:null /]
[ButtonCompare baseString1:AliceBaseString baseString2:BobBaseString comparedString:comparedString
text:"compare basestrings"/]

[var name:"comparedStringZoom" value:100 /]
[ShowHide isVisible:"flex" position:"center"]
  [Range value:comparedStringZoom min:25 max:500 step:25 /]
  [ScrollBox value:comparedString zoomFactor:comparedStringZoom /]
[/ShowHide]