[meta title:"BB84" description:"Quantum cryptography protocol explained"/]

[Header
  fullWidth:true
  title:"BB84"
  subtitle:"Quantum cryptography protocol explained"
  author:"Adrian Althaus, Fabian Meyer"
  date:`(new Date()).toDateString()`
  background:"#403d58"
  color:"#ededef"
  /]

# Introduction

The goal of this website is to explain the BB84-protocol, an encryption-protocol, in a simple way.
BB84 is named after its inventors, Charles H. Bennet and Gilles Brassard and the year of its publication, 1984. BB84 was the first quantum-key-distribution and is one of the most popular quantum-key-distribution (QKD) Protocols.

With this protocol, two parties (Alice and Bob) can compute  securely a private key (a string of bits, `1` or `0`) and share it via a (public) quantum channel. With that key they can encrypt and decrypt data symmetrically as one does with a one-time pad.

First of all Alice and Bob have to decide on some settings like the length of the bit string, the ratio of their bases and so on:

# System Overview

[var name:"strLength" value:2048 /]
[var name:"noise" value:0 /]
[var name:"AliceProb" value:50 /]
[var name:"BobProb" value:50 /]
[var name:"eavesdropping" value:0 /]
[fullWidth]
  [SystemOverview
    strLength:strLength
    noise:noise
    AliceProb:AliceProb
    BobProb:BobProb
    eavesdropping:eavesdropping
    ]
    [TextInput value:strLength/]
  [/SystemOverview]
[/fullWidth]

# Alice computes a string and a base with given length

Alice chooses a random bit string with the given length [Display value:strLength format:"d" /]. She then also has to generate a random string of bases with the same length. There are two possible bases, orthogonal (`+`) and diagonal (`x`).

You can change the ratio of Alice's bases with the slider on the [system overview](#system-overview) panel. Click on the button below to get the bit string and base.

[var name:"AliceBitString" value:"" /]
[var name:"AliceBaseString" value:"" /]
[var name:"AliceDataHasLoaded" value:false /]
[ButtonAliceStart
  strLength:strLength
  AliceProb:AliceProb
  bitString:AliceBitString
  baseString:AliceBaseString
  autostart:false
  dataHasLoaded:AliceDataHasLoaded
  text:"get Alice's bit string and base"
  /]

Now Alice has chosen a random bit string and a base, both with the same length. You can take a look at Alice's bit string and her base here:

[var name:"AliceBitStringZoom" value:100 /]
[var name:"AliceBaseStringZoom" value:100 /]
[PhotonGridDouble
  bitString:AliceBitString
  baseString:AliceBaseString
  dataHasLoaded:AliceDataHasLoaded
  bitStringZoom:AliceBitStringZoom
  baseStringZoom:AliceBaseStringZoom
  colorBackground:false
  firstStringIsBit:true
  secondStringIsBit:false
  /]

# Alice sends her photons to Bob

Every single bit of her string will be encoded with the corresponding base element, which results in a specific polarization. Her photons can have a polarization with 0째, 45째, 90째 or 135째. Orthogonal bases result in orthogonal polarization and vice versa. The encryption of here photons follows the following schema:

[InformationBox
  size:"big"
  /]

# Noise

Now Alice takes her photons and sends them via a quantum channel to Bob.
This quantum channel is an optical channel like a optical-fibre cable.
Usually the channel is noisy and some photons or their polarization will get changed. This is a process called birefringence. You can set the amount of noise with the noise slider here or in the [system overview](#system-overview) section.

[SimpleSlider
  setting:noise
  text:"set noise: "
  max:100
/]

Click on the button below to send Alice's photons to Bob.

[var name:"RawPolarization" value:null /]
[var name:"AlicePolarization" value:null /]
[var name:"PolarizationHasLoaded" value:false /]
[var name:"ColorKey" value:null /]
[ButtonEmitPhotons
  bitString:AliceBitString
  baseString:AliceBaseString
  rawPolarization:RawPolarization
  polarization:AlicePolarization
  colorKey:ColorKey
  buttonActive:AliceDataHasLoaded
  rodalText:"Alice has to compute her strings first!"
  polarizationHasLoaded:PolarizationHasLoaded
  text:"Send photons to Bob"
  /]

[fullWidth]
  [ShowHide
    isVisible:"none"
    showButton:false
    trigger:PolarizationHasLoaded
    position:"center"
  ]
    [AnimationEmit /]
  [/ShowHide]
[/fullWidth]

# Eve wants to eavesdrop on Alice's photons

A potential eavesdropper, we call him Eve, could measure Alice's photons and try to decode the original message. As Eve has no clue about the encoding, she has no other option than to guess and to use a random base to measure the photons from Alice.

However if she measures a photon with the wrong base, she then risks disturbing the original polarization, thus setting the polarization randomly again, with a probability [Equation] \frac{1}{2} [/Equation]. If Alice chose all bases  orthogonal and diagonal respectively with a probability of [Equation] \frac{1}{2} [/Equation], Eve should measure [Equation] \frac{1}{2} [/Equation] of the photons correctly and set [Equation] \frac{1}{4} [/Equation] of the photons with a wrong base.

[SimpleSlider
  setting:eavesdropping
  text:"set eavesdropping: "
  max:100
/]

# Bobs computes a base with the same length

Like Alice and Eve, Bob first has to define a random base string to measure Alice's photons polarization.

Bobs base string has to be at least the same length as Alice's ones: Length [Display value:strLength format:"d" /]. Click on the button below to compute a corresponding base for Bob.

[var name:"BobBaseString" value:null /]
[var name:"BobBaseHasLoaded" value:false /]
[ButtonBobBase
  strLength:strLength
  BobProb:BobProb
  baseString:BobBaseString
  buttonActive:PolarizationHasLoaded
  rodalText:"Did Alice sent her Photons to Bob?"
  bobBaseHasLoaded:BobBaseHasLoaded
  text:"get Bobs base"
  /]

[var name:"BobsBaseStringZoom" value:100 /]
[PhotonGridSingle
  string:BobBaseString
  dataHasLoaded:BobBaseHasLoaded
  stringZoom:BobsBaseStringZoom
  firstStringIsBit:false
  colorBackground:false
  /]

# Bob measures Alice's Photons with his base

If Bobs base is the same as the one of Alice given a particular photon, the outcome will be certain in the case of absence of noise and eavesdropping. Thus, Bob will be able to decode the String from the polarization correctly with his own base. That means the polarization of the measured photon will not change and he will get the correct bit out of the photons.

[fullWidth]
  [AnimationPhoton1/]
[/fullWidth]

However if he chose the wrong base, the polarization of the photons will be lost as he will set the polarization again randomly while measuring it. If Alice and Bob both chose both bases with a chance of [Equation] \frac{1}{2} [/Equation], Bob should measure every second photon correctly.

[fullWidth]
  [AnimationPhoton2/]
[/fullWidth]

Alice and Bob can decide to choose a specific base with a chance higher than [Equation] \frac{1}{2} [/Equation]. In that way they can improve their key so that they measure the same base more often.
Now Bob takes his base and measures Alice's photons to compute his own bit string. Click on the button below to measure Alice's photons.

[var name:"BobBitString" value:null /]
[var name:"BobStringHasLoaded" value:false /]
[var name:"BobDataHasLoaded" value:false /]
[var name:"StateString" value:null /]
[ButtonMeasure
  strLength:strLength
  rawPolarization:RawPolarization
  baseString:BobBaseString
  noise:noise
  eavesdropping:eavesdropping
  measuredString:BobBitString
  stateString:StateString
  buttonActive:BobBaseHasLoaded
  rodalText:"Did Bob compute a base?"
  bobBaseHasLoaded:BobBaseHasLoaded
  bobStringHasLoaded:BobStringHasLoaded
  bobDataHasLoaded:BobDataHasLoaded
  autostart:false
  text:"measure Alice's photons"
  /]

# Bobs bit string

Here you can see Bob's bit string that he computed from the photons that he received from Alice. You can again click on the grid to inspect string. You will notice that his bit string is not the same as Alice's one.

[var name:"BobBitStringZoom" value:100 /]
[PhotonGridSingle
  string:BobBitString
  dataHasLoaded:BobDataHasLoaded
  stringZoom:BobBitStringZoom
  firstStringIsBit:true
  colorBackground:false
  /]

# Alice and Bob compare their bases

At this point, Bob can announce publicly that he received Alice's transmission.
They then use a public authenticated channel to compare their bases.
For every position in the string, if they both have chosen the same base and in the absence of noise and eavesdropping, Bob can decode Alice's photon and retrieve the original bit.

Click on the button below to compare Alice's and Bob's base.

[var name:"ComparedBase" value:null /]
[var name:"ComparedBaseHasLoaded" value:null /]
[var name:"CommonKeyAlice" value: null /]
[var name:"CommonKeyBob" value: null /]
[var name:"CommonKeyHasLoaded" value:null /]
[var name:"CommonKeyLength" value:null /]
[var name:"StateString2" value:null /]
[ButtonShortenKey
  baseString1:AliceBaseString
  baseString2:BobBaseString
  bitString1:AliceBitString
  bitString2:BobBitString
  stateString:StateString
  stateString2:StateString2
  comparedBase:ComparedBase
  buttonActive:BobDataHasLoaded
  rodalText:"Did Bob measure the polarization?"
  comparedBaseHasLoaded:ComparedBaseHasLoaded
  commonKeyAlice:CommonKeyAlice
  commonKeyBob:CommonKeyBob
  commonKeyHasLoaded:CommonKeyHasLoaded
  commonKeyLength:CommonKeyLength
  text:"compare base strings"
  /]

If they choose both bases with a chance of [Equation] \frac{1}{2} [/Equation], and in the absence of noise, then they should have the same base for every photon with a probability of [Equation] \frac{1}{2} [/Equation]. As you can see, bases with an "`_`" implies that Bob used a different base than Alice to measure this specific photon.

[ShowHide
    isVisible:"none"
    showButton:false
    trigger:ComparedBaseHasLoaded
    position:"center"
  ]
    [Legend1 /]
[/ShowHide]

[var name:"ComparedBaseZoom" value:100 /]
[PhotonGridSingle
  string:ComparedBase
  dataHasLoaded:ComparedBaseHasLoaded
  stringZoom:ComparedBaseZoom
  firstStringIsBit:false
  colorBackground:true
  /]

# Alice and Bob shorten their bit strings according to their different bases

Alice and Bob drop all bits from their bit strings where their bases do not correspond. This new shorter keys are called "sifted keys". Notice that if there is no noise or eavesdropping, both sifted keys are identical.

The length of the sifted keys: [Display value:CommonKeyLength format:"d" /]

These are Alice and Bobs sifted keys:

[var name:"CommonKeyAliceZoom" value:100 /]
[var name:"CommonKeyBobZoom" value:100 /]
[PhotonGridDouble
  bitString:CommonKeyAlice
  baseString:CommonKeyBob
  dataHasLoaded:CommonKeyHasLoaded
  bitStringZoom:CommonKeyAliceZoom
  baseStringZoom:CommonKeyBobZoom
  colorBackground:false
  firstStringIsBit:true
  secondStringIsBit:true
  /]

# Alice and Bob check if Eve has eavesdropped on the key

From the sifted key, they choose [Equation] \frac{k}{2} [/Equation] bits and announce them publicly to check whether more than a certain number of them agree. In that way they can use statistical methods to find out if a potential eavesdropper (Eve) has eavesdropped on the transmission (measured the polarization) and disturbed the signal. If the bits agree, they are discarded and the remaining bits form the shared "secret key".

You can set the percentage of the bits that they compare publicly with the slider below:

[var name:"percentage" value:20 /]
[SimpleSlider
  setting:percentage
  text:"set percentage: "
  max:99
/]

Now Alice and Bob drop all the bits that they have announced publicly and form the shared secret key. Press on the button below to compute their shared keys:

[var name:"RestKeyAlice" value: null /]
[var name:"RestKeyBob" value: null /]
[var name:"RestKeyHasLoaded" value:null /]
[var name:"RestKeyLength" value: null /]
[var name:"Match" value:null /]
[var name:"RelativeLength" value:null /]
[ButtonCompareKey
  bitString1:CommonKeyAlice
  bitString2:CommonKeyBob
  stateString:StateString2
  colorKey:ColorKey
  percentage:percentage
  restKeyAlice:RestKeyAlice
  restKeyBob:RestKeyBob
  match:Match
  strLength:strLength
  relativeLength:RelativeLength
  restKeyHasLoaded:RestKeyHasLoaded
  restKeyLength:RestKeyLength
  text:"computed shared keys"
  /]

Percentage of bits that match: [Display value:Match format:".0%" /]

Length of the shared keys: [Display value:RestKeyLength format:"d" /]

Relative length of the shared key compared to string in the beginning: [Display value:RelativeLength format:".0%" /]

These are Alice and Bobs shared keys:

[ShowHide
    isVisible:"none"
    showButton:false
    trigger:RestKeyHasLoaded
    position:"center"
  ]
    [Legend2 /]
[/ShowHide]

[var name:"RestKeyAliceZoom" value:100 /]
[var name:"RestKeyBobZoom" value:100 /]
[PhotonGridDouble
  bitString:RestKeyAlice
  baseString:RestKeyBob
  colorKey:ColorKey
  dataHasLoaded:RestKeyHasLoaded
  bitStringZoom:RestKeyAliceZoom
  baseStringZoom:RestKeyBobZoom
  colorBackground:true
  firstStringIsBit:true
  secondStringIsBit:true
  /]

# Conclusion

In the absence of noise and eavesdropping, Alice and Bob should now have successfully established a shared secret key, that they can use to encrypt data as a one-time pad.

[EmojiComponent 
  emoji:":party_popper:"
/]

If there is noise or eavesdropping, Alice and Bob can not distinguish between it because both of it disturbs the polarization of the transmitted photons. So they will have to treat noise as eavesdropping also. If Eve is listening on the whole transmission, 50% of her measured photons will go undetected and 25% of her measured photons will still have the correct polarization due to correct resetting of the polarization. As a rule of thumb, if more than 10% of the two bit strings do not match, Alice and Bob can assume that Eve has eavesdropped on their transmission and should abort the transmission.

There are two further post-processing improvements that Alice and Bob can do: Information reconciliation algorithms can repair disturbed strings to a certain extent. And privacy amplification algorithms are similar to hashing in that way, that they create a much smaller key that is used as a one time pad in the end.

# Additional tasks

* Try out setting the ratio of Alice and Bobs base contrary to each other. What happened to the length of the string?

* What has the bigger impact on Bobs bit string, noise or eavesdropping? Why?

By [Adrian Althaus](https://github.com/althaus1004) and [Fabian Meyer](https://github.com/fabmeyer)

Source code is [here](https://github.com/fabmeyer/WIPRO)