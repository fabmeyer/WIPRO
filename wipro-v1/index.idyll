[meta title:"BB84" description:"Quantum cryptography protocol explained"/]

[Header
  fullWidth:true
  title:"BB84"
  subtitle:"Quantum cryptography protocol explained"
  author:"Adrian Althaus, Fabian Meyer"
  date:`(new Date()).toDateString()`
  background:"#403d58"
  color:"#ededef"
  /]

# Introduction

The goal of this website is to explain the BB84-protocol in a simple way.
BB84 is named after its inventors, Charles H. Bennet and Gilles Brassard and the year of its publication, 1984. BB84 was the first quantum-key-distribution and is one of the most popular quantum-key-distribution (QKD) Protocols.

With this protocol, two parties (Alice and Bob) can compute together securely a private key (a string of bits, `1` or `0`) and share it via a (public) quantum channel. With that key they can encrypt and decrypt data symmetric as one does with a one-time pad.

First of all Alice and Bob have to decide on some settings like the length of the bit string, the ratio of their bases and so on:

## System Overview

[var name:"strLength" value:2048 /]
[var name:"noise" value:0 /]
[var name:"AliceProb" value:50 /]
[var name:"BobProb" value:50 /]
[var name:"eavesdropping" value:0 /]
[fullWidth]
  [SystemOverview
    strLength:strLength
    noise:noise
    AliceProb:AliceProb
    BobProb:BobProb
    eavesdropping:eavesdropping
    text:"save settings"
    ]
    [TextInput value:strLength/]
  [/SystemOverview]
[/fullWidth]

# Alices computes a string and a base with given length

Alice computes a random bit string with the given length [Display value:strLength format:"d" /]. She then also has to compute a random string of bases with the same length. There are two possible bases, orthogonal (`+`) and diagonal (`x`).

You can change the ratio of Alice's bases with the slider on the [system overview](#system-overview) panel. Click on the button below to start the computation of her bit string and base.

[var name:"AliceBitString" value:"" /]
[var name:"AliceBaseString" value:"" /]
[var name:"AliceDataHasLoaded" value:false /]
[ButtonAliceStart
  strLength:strLength
  AliceProb:AliceProb
  bitString:AliceBitString
  baseString:AliceBaseString
  autostart:false
  dataHasLoaded:AliceDataHasLoaded
  text:"get Alice's bit string and base"
  /]

Now Alice has successfully computed a random bit string and a base, both with the same length. You can take a look at Alice's bit string and her base here:

## Alice's bit string and base

[var name:"AliceBitStringZoom" value:100 /]
[var name:"AliceBaseStringZoom" value:100 /]
[PhotonGridDouble
  bitString:AliceBitString
  baseString:AliceBaseString
  dataHasLoaded:AliceDataHasLoaded
  bitStringZoom:AliceBitStringZoom
  baseStringZoom:AliceBaseStringZoom
  /]

[ShowHide
  isVisible:"none"
  showButton:false
  trigger:AliceDataHasLoaded
  position:"flex-end"
]
  [Aside]
    [AsideText
      text:"Click into the grid to get a better view of the bit string and the base."
    /]
  [/Aside]
[/ShowHide]

## Alice sends her photons to Bob

Every single bit of her string will be encoded with her base so that from the bit and the base a specific polarization results. Her photons can have a polarization with 0째, 45째, 90째 or 135째. Orthogonal bases result in orthogonal polarization and vice versa. The encryption of here photons follows the following schema:

[InformationBox
  size:"big"
  /]

Now Alice takes her photons and sends them via a quantum channel to Bob.
This quantum channel is an optical channel like a optical-fibre cable.
Usually the channel is noisy and some photons or their polarization will get changed. You can set the amount of noise with the noise slider or you can adjust it in the [system overview](#system-overview) section.

// TODO: insert noise here
[SimpleSlider
  setting:noise
  text:"set noise"
/]

Click on the button below to send Alice's photons to Bob.

[var name:"RawPolarization" value:null /]
[var name:"AlicePolarization" value:null /]
[var name:"PolarizationHasLoaded" value:false /]
[ButtonEmitPhotons
  bitString:AliceBitString
  baseString:AliceBaseString
  rawPolarization:RawPolarization
  polarization:AlicePolarization
  noise:noise
  polarizationHasLoaded:PolarizationHasLoaded
  text:"Send photons to Bob"
  /]

[fullWidth]
  [ShowHide
    isVisible:"none"
    showButton:false
    trigger:PolarizationHasLoaded
    position:"center"
  ]
    [AnimationEmit /]
  [/ShowHide]
[/fullWidth]

# Eve wants to eavesdrop on Alice's photons

A potential eavesdropper, we call him Eve, could measure Alice's photons and try to decode the original message. However if she measures a photon with the wrong base, she then risks disturbing the original polarization with a probability [Equation] \frac{1}{2} [/Equation]. 

// TODO: insert eavesdropping here
[SimpleSlider
  setting:eavesdropping
  text:"set eavesdropping"
/]

# Bob measures Alice's photons

Like Alice, Bob first has to define a random base string to measure Alice's photons polarization.

## Bobs computes a base with the same length

Bobs base string has to be the same length as Alice's ones: Length [Display value:strLength format:"d" /]. Click on the button below to compute a corresponding base for Bob.

[var name:"BobBaseString" value:null /]
[var name:"BobBaseHasLoaded" value:false /]
[ButtonBobBase
  strLength:strLength
  BobProb:BobProb
  baseString:BobBaseString
  bobBaseHasLoaded:BobBaseHasLoaded
  text:"get Bobs base"
  /]

## Bob measures Alice's Photons with his base

For every photon, if Bobs base is the same as Alice's, the outcome will be certain and Bob will be able to decode the String from the polarization correctly with his own base. That means the polarization of the measured photon will not change.

[fullWidth]
  [AnimationPhoton1/]
[/fullWidth]

However if he chose the wrong base, the polarization of the photons will be lost as he will set the polarization again randomly while measuring it. If Alice and Bob both chose both bases with a chance of [Equation] \frac{1}{2} [/Equation], Bob should measure every second photon correctly.

[fullWidth]
  [AnimationPhoton2/]
[/fullWidth]

Alice and Bob can decide to choose a specific base with a chance higher than [Equation] \frac{1}{2} [/Equation]. In that way they can improve their key so that they measure the same base more often.
Now Bob takes his base and measures Alice's photons with his base to compute his own bit string. Click on the button below to measure Alice's photons.

[var name:"BobBitString" value:null /]
[var name:"BobStringHasLoaded" value:false /]
[var name:"BobDataHasLoaded" value:false /]
[ButtonMeasure
  strLength:strLength
  rawPolarization:RawPolarization
  polarization:AlicePolarization
  baseString:BobBaseString
  measuredString:BobBitString
  bobBaseHasLoaded:BobBaseHasLoaded
  bobStringHasLoaded:BobStringHasLoaded
  bobDataHasLoaded:BobDataHasLoaded
  autostart:false
  text:"measure Alice's photons"
  /]

## Bobs bit string and base

Here you can see Bob's base and the bit string that he computed from the photons that he received from Alice. You can again click on the grid to inspect this two strings. You will notice that his bit string is not the same as Alice's one.

[var name:"BobBitStringZoom" value:100 /]
[var name:"BobBaseStringZoom" value:100 /]
[PhotonGridDouble
  bitString:BobBitString
  baseString:BobBaseString
  dataHasLoaded:BobDataHasLoaded
  bitStringZoom:BobBitStringZoom
  baseStringZoom:BobBaseStringZoom
  /]

## Alice and Bob compare their bases

At this point, Bob can announce publicly that he received Alice's transmission.
They then use a public authenticated channel to compare their bases.
For every position in the string, if they both have chosen the same base, Bob can decode Alice's photon and retrieve the original bit.

[var name:"ComparedBase" value:null /]
[var name:"ComparedBaseHasLoaded" value:null /]
[var name:"CommonKey" value: null /]
[var name:"CommonKeyHasLoaded" value:null /]
[var name:"CommonKeyLength" value: null /]
[ButtonShortenKey
  baseString1:AliceBaseString
  baseString2:BobBaseString
  bitString:AliceBitString
  comparedBase:ComparedBase
  comparedBaseHasLoaded:ComparedBaseHasLoaded
  commonKey:CommonKey
  commonKeyHasLoaded:CommonKeyHasLoaded
  commonKeyLength:CommonKeyLength
  text:"compare base strings"
  /]

If they choose both bases with a chance of [Equation] \frac{1}{2} [/Equation], then they should have the same base for every photon with a probability of [Equation] \frac{1}{2} [/Equation]. They drop all bits from their bit strings where their bases do not correspond. In that way they create a shortened key together that they already share.

[var name:"ComparedBaseZoom" value:null /]
[PhotonGridSingle
  string:ComparedBase
  dataHasLoaded:ComparedBaseHasLoaded
  stringZoom:ComparedBaseZoom
  /]

## Alice and Bob check if Eve has eavesdropped on the key

From the shortened key, they choose [Equation] \frac{k}{2} [/Equation] bits and announce them public to check to see whether more than a certain number of them agree. In that way they can use statistical tests to find out if a potential eavesdropper (Eve) has measured the polarization and disturbed the signal. If the bits agree, they are discarded and the remaining bits form the shared secret key.

TODO: Eve

## Alice and Bob shorten their bit strings

The length of their shortened key: [Display value:CommonKeyLength format:"d" /]

This is the shortened key:

[var name:"CommonKeyZoom" value:null /]
[PhotonGridSingle
  string:CommonKey
  dataHasLoaded:CommonKeyHasLoaded
  stringZoom:CommonKeyZoom
  /]

